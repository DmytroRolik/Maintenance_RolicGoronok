#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Maintenance_RolicGoronok
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ServiceStation")]
	public partial class MaintenanceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCarMalfunctions(CarMalfunctions instance);
    partial void UpdateCarMalfunctions(CarMalfunctions instance);
    partial void DeleteCarMalfunctions(CarMalfunctions instance);
    partial void InsertCars(Cars instance);
    partial void UpdateCars(Cars instance);
    partial void DeleteCars(Cars instance);
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    partial void InsertEmployees(Employees instance);
    partial void UpdateEmployees(Employees instance);
    partial void DeleteEmployees(Employees instance);
    partial void InsertExecutors(Executors instance);
    partial void UpdateExecutors(Executors instance);
    partial void DeleteExecutors(Executors instance);
    partial void InsertMalfunctions(Malfunctions instance);
    partial void UpdateMalfunctions(Malfunctions instance);
    partial void DeleteMalfunctions(Malfunctions instance);
    partial void InsertModels(Models instance);
    partial void UpdateModels(Models instance);
    partial void DeleteModels(Models instance);
    partial void InsertOrders(Orders instance);
    partial void UpdateOrders(Orders instance);
    partial void DeleteOrders(Orders instance);
    partial void InsertOrderServices(OrderServices instance);
    partial void UpdateOrderServices(OrderServices instance);
    partial void DeleteOrderServices(OrderServices instance);
    partial void InsertPersons(Persons instance);
    partial void UpdatePersons(Persons instance);
    partial void DeletePersons(Persons instance);
    partial void InsertServicesInfos(ServicesInfos instance);
    partial void UpdateServicesInfos(ServicesInfos instance);
    partial void DeleteServicesInfos(ServicesInfos instance);
    partial void InsertSpecialities(Specialities instance);
    partial void UpdateSpecialities(Specialities instance);
    partial void DeleteSpecialities(Specialities instance);
    #endregion
		
		public MaintenanceDataContext() : 
				base(global::Maintenance_RolicGoronok.Properties.Settings.Default.ServiceStationConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CarMalfunctions> CarMalfunctions
		{
			get
			{
				return this.GetTable<CarMalfunctions>();
			}
		}
		
		public System.Data.Linq.Table<Cars> Cars
		{
			get
			{
				return this.GetTable<Cars>();
			}
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
		
		public System.Data.Linq.Table<Employees> Employees
		{
			get
			{
				return this.GetTable<Employees>();
			}
		}
		
		public System.Data.Linq.Table<Executors> Executors
		{
			get
			{
				return this.GetTable<Executors>();
			}
		}
		
		public System.Data.Linq.Table<Malfunctions> Malfunctions
		{
			get
			{
				return this.GetTable<Malfunctions>();
			}
		}
		
		public System.Data.Linq.Table<Models> Models
		{
			get
			{
				return this.GetTable<Models>();
			}
		}
		
		public System.Data.Linq.Table<Orders> Orders
		{
			get
			{
				return this.GetTable<Orders>();
			}
		}
		
		public System.Data.Linq.Table<OrderServices> OrderServices
		{
			get
			{
				return this.GetTable<OrderServices>();
			}
		}
		
		public System.Data.Linq.Table<Persons> Persons
		{
			get
			{
				return this.GetTable<Persons>();
			}
		}
		
		public System.Data.Linq.Table<ServicesInfos> ServicesInfos
		{
			get
			{
				return this.GetTable<ServicesInfos>();
			}
		}
		
		public System.Data.Linq.Table<Specialities> Specialities
		{
			get
			{
				return this.GetTable<Specialities>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarMalfunctions")]
	public partial class CarMalfunctions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CarId;
		
		private int _MalfunctionId;
		
		private EntitySet<OrderServices> _OrderServices;
		
		private EntityRef<Cars> _Cars;
		
		private EntityRef<Malfunctions> _Malfunctions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCarIdChanging(int value);
    partial void OnCarIdChanged();
    partial void OnMalfunctionIdChanging(int value);
    partial void OnMalfunctionIdChanged();
    #endregion
		
		public CarMalfunctions()
		{
			this._OrderServices = new EntitySet<OrderServices>(new Action<OrderServices>(this.attach_OrderServices), new Action<OrderServices>(this.detach_OrderServices));
			this._Cars = default(EntityRef<Cars>);
			this._Malfunctions = default(EntityRef<Malfunctions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarId", DbType="Int NOT NULL")]
		public int CarId
		{
			get
			{
				return this._CarId;
			}
			set
			{
				if ((this._CarId != value))
				{
					if (this._Cars.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIdChanging(value);
					this.SendPropertyChanging();
					this._CarId = value;
					this.SendPropertyChanged("CarId");
					this.OnCarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MalfunctionId", DbType="Int NOT NULL")]
		public int MalfunctionId
		{
			get
			{
				return this._MalfunctionId;
			}
			set
			{
				if ((this._MalfunctionId != value))
				{
					if (this._Malfunctions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMalfunctionIdChanging(value);
					this.SendPropertyChanging();
					this._MalfunctionId = value;
					this.SendPropertyChanged("MalfunctionId");
					this.OnMalfunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarMalfunctions_OrderServices", Storage="_OrderServices", ThisKey="Id", OtherKey="MalfunctionId")]
		public EntitySet<OrderServices> OrderServices
		{
			get
			{
				return this._OrderServices;
			}
			set
			{
				this._OrderServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_CarMalfunctions", Storage="_Cars", ThisKey="CarId", OtherKey="Id", IsForeignKey=true)]
		public Cars Cars
		{
			get
			{
				return this._Cars.Entity;
			}
			set
			{
				Cars previousValue = this._Cars.Entity;
				if (((previousValue != value) 
							|| (this._Cars.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars.Entity = null;
						previousValue.CarMalfunctions.Remove(this);
					}
					this._Cars.Entity = value;
					if ((value != null))
					{
						value.CarMalfunctions.Add(this);
						this._CarId = value.Id;
					}
					else
					{
						this._CarId = default(int);
					}
					this.SendPropertyChanged("Cars");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Malfunctions_CarMalfunctions", Storage="_Malfunctions", ThisKey="MalfunctionId", OtherKey="Id", IsForeignKey=true)]
		public Malfunctions Malfunctions
		{
			get
			{
				return this._Malfunctions.Entity;
			}
			set
			{
				Malfunctions previousValue = this._Malfunctions.Entity;
				if (((previousValue != value) 
							|| (this._Malfunctions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Malfunctions.Entity = null;
						previousValue.CarMalfunctions.Remove(this);
					}
					this._Malfunctions.Entity = value;
					if ((value != null))
					{
						value.CarMalfunctions.Add(this);
						this._MalfunctionId = value.Id;
					}
					else
					{
						this._MalfunctionId = default(int);
					}
					this.SendPropertyChanged("Malfunctions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderServices(OrderServices entity)
		{
			this.SendPropertyChanging();
			entity.CarMalfunctions = this;
		}
		
		private void detach_OrderServices(OrderServices entity)
		{
			this.SendPropertyChanging();
			entity.CarMalfunctions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Cars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private System.DateTime _ProductionYear;
		
		private string _Number;
		
		private string _Color;
		
		private int _OwnerId;
		
		private EntitySet<CarMalfunctions> _CarMalfunctions;
		
		private EntitySet<Orders> _Orders;
		
		private EntityRef<Models> _Models;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnProductionYearChanging(System.DateTime value);
    partial void OnProductionYearChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    #endregion
		
		public Cars()
		{
			this._CarMalfunctions = new EntitySet<CarMalfunctions>(new Action<CarMalfunctions>(this.attach_CarMalfunctions), new Action<CarMalfunctions>(this.detach_CarMalfunctions));
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._Models = default(EntityRef<Models>);
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Models.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionYear", DbType="Date NOT NULL")]
		public System.DateTime ProductionYear
		{
			get
			{
				return this._ProductionYear;
			}
			set
			{
				if ((this._ProductionYear != value))
				{
					this.OnProductionYearChanging(value);
					this.SendPropertyChanging();
					this._ProductionYear = value;
					this.SendPropertyChanged("ProductionYear");
					this.OnProductionYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int NOT NULL")]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_CarMalfunctions", Storage="_CarMalfunctions", ThisKey="Id", OtherKey="CarId")]
		public EntitySet<CarMalfunctions> CarMalfunctions
		{
			get
			{
				return this._CarMalfunctions;
			}
			set
			{
				this._CarMalfunctions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_Orders", Storage="_Orders", ThisKey="Id", OtherKey="CarId")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Models_Cars", Storage="_Models", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true)]
		public Models Models
		{
			get
			{
				return this._Models.Entity;
			}
			set
			{
				Models previousValue = this._Models.Entity;
				if (((previousValue != value) 
							|| (this._Models.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Models.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Models.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Models");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Cars", Storage="_Persons", ThisKey="OwnerId", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._OwnerId = value.Id;
					}
					else
					{
						this._OwnerId = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarMalfunctions(CarMalfunctions entity)
		{
			this.SendPropertyChanging();
			entity.Cars = this;
		}
		
		private void detach_CarMalfunctions(CarMalfunctions entity)
		{
			this.SendPropertyChanging();
			entity.Cars = null;
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Cars = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Cars = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Employees> _Employees;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Categories()
		{
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Employees", Storage="_Employees", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PersonId;
		
		private int _SpecialityId;
		
		private int _CategoryId;
		
		private int _Experience;
		
		private bool _IsWorking;
		
		private EntitySet<Executors> _Executors;
		
		private EntityRef<Categories> _Categories;
		
		private EntityRef<Persons> _Persons;
		
		private EntityRef<Specialities> _Specialities;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnSpecialityIdChanging(int value);
    partial void OnSpecialityIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnExperienceChanging(int value);
    partial void OnExperienceChanged();
    partial void OnIsWorkingChanging(bool value);
    partial void OnIsWorkingChanged();
    #endregion
		
		public Employees()
		{
			this._Executors = new EntitySet<Executors>(new Action<Executors>(this.attach_Executors), new Action<Executors>(this.detach_Executors));
			this._Categories = default(EntityRef<Categories>);
			this._Persons = default(EntityRef<Persons>);
			this._Specialities = default(EntityRef<Specialities>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityId", DbType="Int NOT NULL")]
		public int SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					if (this._Specialities.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="Int NOT NULL")]
		public int Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWorking", DbType="Bit NOT NULL")]
		public bool IsWorking
		{
			get
			{
				return this._IsWorking;
			}
			set
			{
				if ((this._IsWorking != value))
				{
					this.OnIsWorkingChanging(value);
					this.SendPropertyChanging();
					this._IsWorking = value;
					this.SendPropertyChanged("IsWorking");
					this.OnIsWorkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Executors", Storage="_Executors", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<Executors> Executors
		{
			get
			{
				return this._Executors;
			}
			set
			{
				this._Executors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Employees", Storage="_Categories", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Employees", Storage="_Persons", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialities_Employees", Storage="_Specialities", ThisKey="SpecialityId", OtherKey="Id", IsForeignKey=true)]
		public Specialities Specialities
		{
			get
			{
				return this._Specialities.Entity;
			}
			set
			{
				Specialities previousValue = this._Specialities.Entity;
				if (((previousValue != value) 
							|| (this._Specialities.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialities.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Specialities.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._SpecialityId = value.Id;
					}
					else
					{
						this._SpecialityId = default(int);
					}
					this.SendPropertyChanged("Specialities");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Executors(Executors entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Executors(Executors entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Executors")]
	public partial class Executors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ServiceId;
		
		private int _EmployeeId;
		
		private EntityRef<Employees> _Employees;
		
		private EntityRef<OrderServices> _OrderServices;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public Executors()
		{
			this._Employees = default(EntityRef<Employees>);
			this._OrderServices = default(EntityRef<OrderServices>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL")]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._OrderServices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Executors", Storage="_Employees", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.Executors.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.Executors.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderServices_Executors", Storage="_OrderServices", ThisKey="ServiceId", OtherKey="Id", IsForeignKey=true)]
		public OrderServices OrderServices
		{
			get
			{
				return this._OrderServices.Entity;
			}
			set
			{
				OrderServices previousValue = this._OrderServices.Entity;
				if (((previousValue != value) 
							|| (this._OrderServices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderServices.Entity = null;
						previousValue.Executors.Remove(this);
					}
					this._OrderServices.Entity = value;
					if ((value != null))
					{
						value.Executors.Add(this);
						this._ServiceId = value.Id;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("OrderServices");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Malfunctions")]
	public partial class Malfunctions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CarMalfunctions> _CarMalfunctions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Malfunctions()
		{
			this._CarMalfunctions = new EntitySet<CarMalfunctions>(new Action<CarMalfunctions>(this.attach_CarMalfunctions), new Action<CarMalfunctions>(this.detach_CarMalfunctions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Malfunctions_CarMalfunctions", Storage="_CarMalfunctions", ThisKey="Id", OtherKey="MalfunctionId")]
		public EntitySet<CarMalfunctions> CarMalfunctions
		{
			get
			{
				return this._CarMalfunctions;
			}
			set
			{
				this._CarMalfunctions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarMalfunctions(CarMalfunctions entity)
		{
			this.SendPropertyChanging();
			entity.Malfunctions = this;
		}
		
		private void detach_CarMalfunctions(CarMalfunctions entity)
		{
			this.SendPropertyChanging();
			entity.Malfunctions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Models")]
	public partial class Models : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Cars> _Cars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Models()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Models_Cars", Storage="_Cars", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Models = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Models = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private int _CarId;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _FinishDate;
		
		private EntitySet<OrderServices> _OrderServices;
		
		private EntityRef<Cars> _Cars;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnCarIdChanging(int value);
    partial void OnCarIdChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnFinishDateChanging(System.DateTime value);
    partial void OnFinishDateChanged();
    #endregion
		
		public Orders()
		{
			this._OrderServices = new EntitySet<OrderServices>(new Action<OrderServices>(this.attach_OrderServices), new Action<OrderServices>(this.detach_OrderServices));
			this._Cars = default(EntityRef<Cars>);
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarId", DbType="Int NOT NULL")]
		public int CarId
		{
			get
			{
				return this._CarId;
			}
			set
			{
				if ((this._CarId != value))
				{
					if (this._Cars.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIdChanging(value);
					this.SendPropertyChanging();
					this._CarId = value;
					this.SendPropertyChanged("CarId");
					this.OnCarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDate", DbType="Date NOT NULL")]
		public System.DateTime FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_OrderServices", Storage="_OrderServices", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrderServices> OrderServices
		{
			get
			{
				return this._OrderServices;
			}
			set
			{
				this._OrderServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_Orders", Storage="_Cars", ThisKey="CarId", OtherKey="Id", IsForeignKey=true)]
		public Cars Cars
		{
			get
			{
				return this._Cars.Entity;
			}
			set
			{
				Cars previousValue = this._Cars.Entity;
				if (((previousValue != value) 
							|| (this._Cars.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Cars.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CarId = value.Id;
					}
					else
					{
						this._CarId = default(int);
					}
					this.SendPropertyChanged("Cars");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Orders", Storage="_Persons", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderServices(OrderServices entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_OrderServices(OrderServices entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderServices")]
	public partial class OrderServices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OrderId;
		
		private int _ServiceId;
		
		private int _MalfunctionId;
		
		private EntitySet<Executors> _Executors;
		
		private EntityRef<CarMalfunctions> _CarMalfunctions;
		
		private EntityRef<Orders> _Orders;
		
		private EntityRef<ServicesInfos> _ServicesInfos;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnMalfunctionIdChanging(int value);
    partial void OnMalfunctionIdChanged();
    #endregion
		
		public OrderServices()
		{
			this._Executors = new EntitySet<Executors>(new Action<Executors>(this.attach_Executors), new Action<Executors>(this.detach_Executors));
			this._CarMalfunctions = default(EntityRef<CarMalfunctions>);
			this._Orders = default(EntityRef<Orders>);
			this._ServicesInfos = default(EntityRef<ServicesInfos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL")]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._ServicesInfos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MalfunctionId", DbType="Int NOT NULL")]
		public int MalfunctionId
		{
			get
			{
				return this._MalfunctionId;
			}
			set
			{
				if ((this._MalfunctionId != value))
				{
					if (this._CarMalfunctions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMalfunctionIdChanging(value);
					this.SendPropertyChanging();
					this._MalfunctionId = value;
					this.SendPropertyChanged("MalfunctionId");
					this.OnMalfunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderServices_Executors", Storage="_Executors", ThisKey="Id", OtherKey="ServiceId")]
		public EntitySet<Executors> Executors
		{
			get
			{
				return this._Executors;
			}
			set
			{
				this._Executors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarMalfunctions_OrderServices", Storage="_CarMalfunctions", ThisKey="MalfunctionId", OtherKey="Id", IsForeignKey=true)]
		public CarMalfunctions CarMalfunctions
		{
			get
			{
				return this._CarMalfunctions.Entity;
			}
			set
			{
				CarMalfunctions previousValue = this._CarMalfunctions.Entity;
				if (((previousValue != value) 
							|| (this._CarMalfunctions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarMalfunctions.Entity = null;
						previousValue.OrderServices.Remove(this);
					}
					this._CarMalfunctions.Entity = value;
					if ((value != null))
					{
						value.OrderServices.Add(this);
						this._MalfunctionId = value.Id;
					}
					else
					{
						this._MalfunctionId = default(int);
					}
					this.SendPropertyChanged("CarMalfunctions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_OrderServices", Storage="_Orders", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.OrderServices.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.OrderServices.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServicesInfos_OrderServices", Storage="_ServicesInfos", ThisKey="ServiceId", OtherKey="Id", IsForeignKey=true)]
		public ServicesInfos ServicesInfos
		{
			get
			{
				return this._ServicesInfos.Entity;
			}
			set
			{
				ServicesInfos previousValue = this._ServicesInfos.Entity;
				if (((previousValue != value) 
							|| (this._ServicesInfos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesInfos.Entity = null;
						previousValue.OrderServices.Remove(this);
					}
					this._ServicesInfos.Entity = value;
					if ((value != null))
					{
						value.OrderServices.Add(this);
						this._ServiceId = value.Id;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("ServicesInfos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Executors(Executors entity)
		{
			this.SendPropertyChanging();
			entity.OrderServices = this;
		}
		
		private void detach_Executors(Executors entity)
		{
			this.SendPropertyChanging();
			entity.OrderServices = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Persons : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private System.DateTime _BirthDate;
		
		private string _Address;
		
		private string _Passport;
		
		private string _License;
		
		private EntitySet<Cars> _Cars;
		
		private EntitySet<Employees> _Employees;
		
		private EntitySet<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnLicenseChanging(string value);
    partial void OnLicenseChanged();
    #endregion
		
		public Persons()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_License", DbType="NVarChar(12)")]
		public string License
		{
			get
			{
				return this._License;
			}
			set
			{
				if ((this._License != value))
				{
					this.OnLicenseChanging(value);
					this.SendPropertyChanging();
					this._License = value;
					this.SendPropertyChanged("License");
					this.OnLicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Cars", Storage="_Cars", ThisKey="Id", OtherKey="OwnerId")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Employees", Storage="_Employees", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Orders", Storage="_Orders", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServicesInfos")]
	public partial class ServicesInfos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Price;
		
		private EntitySet<OrderServices> _OrderServices;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public ServicesInfos()
		{
			this._OrderServices = new EntitySet<OrderServices>(new Action<OrderServices>(this.attach_OrderServices), new Action<OrderServices>(this.detach_OrderServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServicesInfos_OrderServices", Storage="_OrderServices", ThisKey="Id", OtherKey="ServiceId")]
		public EntitySet<OrderServices> OrderServices
		{
			get
			{
				return this._OrderServices;
			}
			set
			{
				this._OrderServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderServices(OrderServices entity)
		{
			this.SendPropertyChanging();
			entity.ServicesInfos = this;
		}
		
		private void detach_OrderServices(OrderServices entity)
		{
			this.SendPropertyChanging();
			entity.ServicesInfos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialities")]
	public partial class Specialities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Employees> _Employees;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Specialities()
		{
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialities_Employees", Storage="_Employees", ThisKey="Id", OtherKey="SpecialityId")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Specialities = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Specialities = null;
		}
	}
}
#pragma warning restore 1591
